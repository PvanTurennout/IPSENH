#################
#### GENERAL ####
#################


variables:
  CLI_VERSION: 11.2.10
  DOCKERHUB_REPO: musicisum4ipsenh/frontend


stages:
  - setup
  - test
  - analysis
  - build
  - docker
  - deploy


cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - node_modules/
    - dist/


################
#### SETUP #####
################


dependencies-install:
  stage: setup
  image: trion/ng-cli:${CLI_VERSION}
  allow_failure: false
  tags:
    - generic
  script:
    - npm ci
  only:
    - development
    - master


###############
#### TEST #####
###############


unit-testing:
  stage: test
  image: trion/ng-cli-karma:${CLI_VERSION}
  tags:
    - generic
  allow_failure: false
  dependencies:
    - dependencies-install
  script:
    - ng test --code-coverage --progress false --watch false
  artifacts:
    paths:
      - coverage/
  only:
    - development
    - master


# protractor image: trion/ng-cli-e2e


##################
#### ANALYSIS ####
##################

sonarqube-check:
  stage: analysis
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner
  allow_failure: true
  only:
    - development


npm-audit-analysis:
  stage: analysis
  image: node:lts-alpine3.10
  allow_failure: true
  tags:
    - generic
  script:
    - npm run audit-analysis
  artifacts:
    name: "$CI_JOB_NAME"
    expire_in: 2 weeks
    when: always
    paths:
      - npm-audit-report.json
  only:
    - development


###############
#### BUILD ####
###############


compile-production:
  stage: build
  image: trion/ng-cli:${CLI_VERSION}
  tags:
    - generic
  allow_failure: false
  dependencies:
    - dependencies-install
  script:
    - ng build --prod --base-href=./
  artifacts:
    expire_in: 1 year
    paths:
      - dist/
  only:
    - master

compile-staging:
  stage: build
  image: trion/ng-cli:${CLI_VERSION}
  tags:
    - generic
  allow_failure: false
  dependencies:
    - dependencies-install
  script:
    - ng build --configuration staging --base-href=./
  artifacts:
    expire_in: 1 month
    paths:
      - dist/
  only:
    - development


################
#### DOCKER ####
################


dockerize-master:
  stage: docker
  image: docker:20.10.6
  allow_failure: false
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TSL_CERTDIR: "/certs"
  tags:
    - docker_generic
  dependencies:
    - compile-production
  services:
    - docker:20.10.6-dind
  before_script:
    - docker login -u $DOCKERHUB_UN -p $DOCKERHUB_PW
  script:
    - docker build -t ${DOCKERHUB_REPO}:stable .
    - docker push ${DOCKERHUB_REPO}:stable
  only:
    - master


dockerize-development:
  stage: docker
  image: docker:20.10.6
  allow_failure: false
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TSL_CERTDIR: "/certs"
  tags:
    - docker_generic
  dependencies:
    - compile-staging
  services:
    - docker:20.10.6-dind
  before_script:
    - docker login -u $DOCKERHUB_UN -p $DOCKERHUB_PW
  script:
    - docker build -t ${DOCKERHUB_REPO}:${CI_PIPELINE_ID} .
    - docker tag ${DOCKERHUB_REPO}:${CI_PIPELINE_ID} ${DOCKERHUB_REPO}:latest
    - docker push ${DOCKERHUB_REPO}:${CI_PIPELINE_ID}
    - docker push ${DOCKERHUB_REPO}:latest
  only:
    - development

################
#### DEPLOY ####
################

deploy-staging:
  variables:
    GIT_STRATEGY: none
  stage: deploy
  image: alpine
  allow_failure: false
  tags:
    - generic
  dependencies:
    - dockerize-development
  only:
    - development
  cache: {}
  script:
    - apk add --no-cache openssh
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" >> ~/.ssh/id_dsa
    - chmod 600 ~/.ssh/id_dsa
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    - ssh deploy@${DEPLOY_SERVER} docker pull ${DOCKERHUB_REPO}:latest
    - ssh deploy@${DEPLOY_SERVER} docker kill frontend-staging-deploy
    - ssh deploy@${DEPLOY_SERVER} docker container rm frontend-staging-deploy
    - ssh deploy@${DEPLOY_SERVER} docker run -d --name frontend-staging-deploy --network staging-network -p 5001:80 ${DOCKERHUB_REPO}:latest


deploy-production:
  variables:
    GIT_STRATEGY: none
  stage: deploy
  image: alpine
  allow_failure: false
  tags:
    - generic
  dependencies:
    - dockerize-master
  only:
    - master
  cache: {}
  script:
    - apk add --no-cache openssh
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" >> ~/.ssh/id_dsa
    - chmod 600 ~/.ssh/id_dsa
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    - ssh deploy@${DEPLOY_SERVER} docker pull ${DOCKERHUB_REPO}:stable
    - ssh deploy@${DEPLOY_SERVER} docker kill frontend-production-deploy
    - ssh deploy@${DEPLOY_SERVER} docker container rm frontend-production-deploy
    - ssh deploy@${DEPLOY_SERVER} docker run -d --name frontend-production-deploy --network production-network -p 5000:80 ${DOCKERHUB_REPO}:stable

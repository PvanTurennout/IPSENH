#################
#### GENERAL ####
#################


variables:
  DOCKERHUB_REPO: musicisum4ipsenh/backend


stages:
  - setup
  - test
  - analysis
  - docker
  - deploy


cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - node_modules/


###############
#### SETUP ####
###############


dependencies-install:
  stage: setup
  image: node:lts-alpine3.10
  allow_failure: false
  tags:
    - generic
  script:
    - npm ci
  only:
    - development
    - master


##############
#### TEST ####
##############


unit-testing:
  stage: test
  image: node:lts-alpine3.10
  allow_failure: false
  tags:
    - generic
  dependencies:
    - dependencies-install
  script:
    - cp $CREATE_ENV_SCRIPT ./env-setup.sh
    - sh env-setup.sh
    - npm run unit
  artifacts:
    name: "backend-code-coverage"
    expire_in: 2 weeks
    when: on_success
    paths:
      - coverage/
  only:
    - development
    - master


integration-testing:
  stage: test
  image: node:lts-alpine3.10
  allow_failure: false
  services:
  - mysql:8.0.25
  variables:
    MYSQL_ROOT_PASSWORD: $SQL_ROOT
    MYSQL_USER: $SQL_USER
    MYSQL_PASSWORD: $SQL_PW
    MYSQL_DATABASE: $SQL_DB
  tags:
    - generic
  dependencies:
    - dependencies-install
  script:
    - cp $CREATE_ENV_SCRIPT ./env-setup.sh
    - sh env-setup.sh
    - npm run integration
  only:
    - development
    - master

 
##################
#### ANALYSIS ####
##################


sonarqube-check:
  stage: analysis
  image: 
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script: 
    - sonar-scanner
  allow_failure: false
  only:
    - development


npm-audit-analysis:
  stage: analysis
  image: node:lts-alpine3.10
  allow_failure: false
  tags:
    - generic
  script:
    - npm run audit-analysis
  artifacts:
    name: "$CI_JOB_NAME"
    expire_in: 1 weeks
    when: always
    paths:
      - npm-audit-report.json
  only:
    - development


################
#### DOCKER ####
################


dockerize-master:
  stage: docker
  image: docker:20.10.6
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TSL_CERTDIR: "/certs"
  tags:
    - docker_generic
  services:
    - docker:20.10.6-dind
  before_script:
    - docker login -u $DOCKERHUB_UN -p $DOCKERHUB_PW
  script:
    - cp $CREATE_PROD_ENV_SCRIPT ./env-setup.sh
    - docker build -t ${DOCKERHUB_REPO}:stable .
    - docker push ${DOCKERHUB_REPO}:stable
  only:
    - master


dockerize-development:
  stage: docker
  image: docker:20.10.6
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TSL_CERTDIR: "/certs"
  tags:
    - docker_generic
  services:
    - docker:20.10.6-dind
  before_script:
    - docker login -u $DOCKERHUB_UN -p $DOCKERHUB_PW
  script:
    - cp $CREATE_STAGE_ENV_SCRIPT ./env-setup.sh
    - docker build -t ${DOCKERHUB_REPO}:${CI_PIPELINE_ID} .
    - docker tag ${DOCKERHUB_REPO}:${CI_PIPELINE_ID} ${DOCKERHUB_REPO}:latest
    - docker push ${DOCKERHUB_REPO}:${CI_PIPELINE_ID}
    - docker push ${DOCKERHUB_REPO}:latest
  only:
    - development


################
#### DEPLOY ####
################


deploy-staging:
  variables:
    GIT_STRATEGY: none
  stage: deploy
  image: alpine
  allow_failure: false
  tags:
    - generic
  dependencies:
    - dockerize-development
  only:
    - development
  cache: {}
  script:
    - apk add --no-cache openssh
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" >> ~/.ssh/id_dsa
    - chmod 600 ~/.ssh/id_dsa
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    - ssh deploy@${DEPLOY_SERVER} docker pull ${DOCKERHUB_REPO}:latest
    - ssh deploy@${DEPLOY_SERVER} docker kill backend-staging-deploy
    - ssh deploy@${DEPLOY_SERVER} docker container rm backend-staging-deploy
    - ssh deploy@${DEPLOY_SERVER} docker run -d --name backend-staging-deploy -p 5011:3000 --network staging-network ${DOCKERHUB_REPO}:latest


deploy-production:
  variables:
    GIT_STRATEGY: none
  stage: deploy
  image: alpine
  allow_failure: false
  tags:
    - generic
  dependencies:
    - dockerize-master
  only:
    - master
  cache: {}
  script:
    - apk add --no-cache openssh
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" >> ~/.ssh/id_dsa
    - chmod 600 ~/.ssh/id_dsa
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    - ssh deploy@${DEPLOY_SERVER} docker pull ${DOCKERHUB_REPO}:stable
    - ssh deploy@${DEPLOY_SERVER} docker kill backend-production-deploy
    - ssh deploy@${DEPLOY_SERVER} docker container rm backend-production-deploy
    - ssh deploy@${DEPLOY_SERVER} docker run -d --name backend-production-deploy -p 5010:3000 --network production-network ${DOCKERHUB_REPO}:stable
